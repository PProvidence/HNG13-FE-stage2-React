// ðŸŽŸ Golden Ticket - React 19 + Vite + TypeScript + TailwindCSS Modular App // Full source for src/ folder

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ // src/main.tsx import React from 'react'; import ReactDOM from 'react-dom/client'; import App from './App'; import './index.css';

ReactDOM.createRoot(document.getElementById('root')!).render( <React.StrictMode> <App /> </React.StrictMode> );

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ // src/index.css @tailwind base; @tailwind components; @tailwind utilities;

body { @apply bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50 text-gray-800; font-family: 'Inter', sans-serif; }

button { @apply transition-all duration-200; }

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ // src/types/ticket.ts export interface Ticket { id: string; title: string; description?: string; status: 'open' | 'in_progress' | 'closed'; priority: 'low' | 'medium' | 'high'; }

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ // src/utils/session.ts export const getSession = (): string | null => localStorage.getItem('ticketapp_session'); export const setSession = (token: string): void => localStorage.setItem('ticketapp_session', token); export const clearSession = (): void => localStorage.removeItem('ticketapp_session');

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ // src/utils/storage.ts import { Ticket } from '../types/ticket';

export const getTickets = (): Ticket[] => JSON.parse(localStorage.getItem('tickets') || '[]'); export const saveTickets = (tickets: Ticket[]): void => localStorage.setItem('tickets', JSON.stringify(tickets));

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ // src/components/Toast.tsx import { FC } from 'react'; import { AlertCircle, CheckCircle, X } from 'lucide-react';

interface ToastProps { message: string; type: 'success' | 'error'; onClose: () => void; }

const Toast: FC<ToastProps> = ({ message, type, onClose }) => (

  <div
    className={`fixed top-4 right-4 z-50 flex items-center gap-3 px-6 py-4 rounded-xl shadow-2xl backdrop-blur-sm animate-slide-in ${
      type === 'success' ? 'bg-gradient-to-r from-amber-400 to-orange-500' : 'bg-gradient-to-r from-red-400 to-pink-500'
    }`}
  >
    {type === 'success' ? (
      <CheckCircle className="w-5 h-5 text-white" />
    ) : (
      <AlertCircle className="w-5 h-5 text-white" />
    )}
    <span className="text-white font-medium">{message}</span>
    <button onClick={onClose} className="text-white hover:text-gray-100">
      <X className="w-5 h-5" />
    </button>
  </div>
);export default Toast;

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ // src/components/Header.tsx import { FC } from 'react'; import { Ticket } from 'lucide-react';

interface HeaderProps { onLogin: () => void; }

const Header: FC<HeaderProps> = ({ onLogin }) => (

  <header className="px-6 py-6 flex justify-between items-center">
    <div className="flex items-center gap-2">
      <Ticket className="w-8 h-8 text-amber-600" />
      <h1 className="text-2xl font-bold bg-gradient-to-r from-amber-600 to-orange-600 bg-clip-text text-transparent">
        Golden Ticket
      </h1>
    </div>
    <button
      onClick={onLogin}
      className="px-6 py-2 text-amber-700 font-medium hover:text-amber-900 transition"
    >
      Login
    </button>
  </header>
);export default Header;

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ // src/components/Footer.tsx import { FC } from 'react';

const Footer: FC = () => (

  <footer className="px-6 py-8 bg-gradient-to-r from-amber-600 to-orange-600 text-white text-center">
    <p className="text-sm">Â© 2025 Golden Ticket. Crafted with excellence.</p>
  </footer>
);export default Footer;

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ // src/components/TicketCard.tsx import { FC } from 'react'; import { Edit2, Trash2 } from 'lucide-react'; import { Ticket } from '../types/ticket';

interface TicketCardProps { ticket: Ticket; onEdit: (ticket: Ticket) => void; onDelete: (id: string) => void; }

const statusColors: Record<Ticket['status'], string> = { open: 'from-green-400 to-emerald-500', in_progress: 'from-yellow-400 to-amber-500', closed: 'from-gray-400 to-slate-500', };

const TicketCard: FC<TicketCardProps> = ({ ticket, onEdit, onDelete }) => (

  <article className="bg-white rounded-2xl shadow-lg hover:shadow-2xl transition-all p-6">
    <div className="flex justify-between items-start mb-4">
      <span className={px-4 py-1 rounded-full text-xs font-semibold text-white bg-gradient-to-r ${statusColors[ticket.status]}}>
        {ticket.status.replace('_', ' ').toUpperCase()}
      </span>
      <span className="text-xs font-medium text-gray-500 uppercase">{ticket.priority}</span>
    </div>
    <h3 className="text-xl font-bold text-gray-800 mb-2">{ticket.title}</h3>
    <p className="text-gray-600 text-sm mb-4">{ticket.description || 'No description'}</p>
    <div className="flex gap-2">
      <button
        onClick={() => onEdit(ticket)}
        className="flex items-center gap-2 px-4 py-2 bg-amber-100 text-amber-700 rounded-lg hover:bg-amber-200 transition text-sm font-medium"
      >
        <Edit2 className="w-4 h-4" />
        Edit
      </button>
      <button
        onClick={() => onDelete(ticket.id)}
        className="flex items-center gap-2 px-4 py-2 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition text-sm font-medium"
      >
        <Trash2 className="w-4 h-4" />
        Delete
      </button>
    </div>
  </article>
);export default TicketCard;

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ // src/App.tsx import { useState, useEffect } from 'react'; import LandingPage from './pages/LandingPage'; import AuthPage from './pages/AuthPage'; import Dashboard from './pages/Dashboard'; import TicketManagement from './pages/TicketManagement'; import { getSession, clearSession } from './utils/session';

export default function App() { const [page, setPage] = useState<'landing' | 'login' | 'signup' | 'dashboard' | 'tickets'>('landing');

useEffect(() => { if (getSession() && page === 'landing') setPage('dashboard'); }, [page]);

const handleNavigate = (next: typeof page) => { if (['dashboard', 'tickets'].includes(next) && !getSession()) { setPage('login'); return; } setPage(next); };

const handleAuth = () => setPage('dashboard'); const handleLogout = () => { clearSession(); setPage('landing'); };

return ( <> <style>{@keyframes slide-in {from {transform:translateX(100%);opacity:0;}to{transform:translateX(0);opacity:1;}}.animate-slide-in{animation:slide-in 0.3s ease-out;}}</style>

{page === 'landing' && <LandingPage onNavigate={handleNavigate} />}
  {page === 'login' && <AuthPage type="login" onNavigate={handleNavigate} onAuth={handleAuth} />}
  {page === 'signup' && <AuthPage type="signup" onNavigate={handleNavigate} onAuth={handleAuth} />}
  {page === 'dashboard' && <Dashboard onNavigate={handleNavigate} onLogout={handleLogout} />}
  {page === 'tickets' && <TicketManagement onNavigate={handleNavigate} onLogout={handleLogout} />}
</>

); }